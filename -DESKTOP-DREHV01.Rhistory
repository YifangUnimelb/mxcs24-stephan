A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}
round(apply(A.posterior,1:2,mean),3)
# report posterior means and sd of parameters
A.E         = apply(A.posterior,1:2,mean)
A.sd        = apply(A.posterior,1:2,sd)
Sigma.E     = apply(Sigma.posterior,1:2,mean)
Sigma.sd    = apply(Sigma.posterior,1:2,sd)
Y.h         = array(NA,c(h,N,S))
for (s in 1:S){
x.Ti        = Y[(nrow(Y)-h+1):nrow(Y),]
x.Ti        = x.Ti[4:1,]
for (i in 1:h){
x.T         = c(1,as.vector(t(x.Ti)))
Y.h[i,,s]   = rmvnorm(1, mean = x.T%*%A.posterior[,,s], sigma=Sigma.posterior[,,s])
x.Ti        = rbind(Y.h[i,,s],x.Ti[1:3,])
}
}
# Define colors
mcxs1  = "#05386B"
mcxs2  = "#379683"
mcxs3  = "#5CDB95"
mcxs4  = "#8EE4AF"
mcxs5  = "#EDF5E1"
mcxs1.rgb   = col2rgb(mcxs1)
mcxs1.shade1= rgb(mcxs1.rgb[1],mcxs1.rgb[2],mcxs1.rgb[3], alpha=120, maxColorValue=255)
mcxs2.rgb   = col2rgb(mcxs2)
mcxs2.shade1= rgb(mcxs2.rgb[1],mcxs2.rgb[2],mcxs2.rgb[3], alpha=120, maxColorValue=255)
#log_wpi_index <- 1
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
bands <- 100
for (i in 2:(ncol(Y.h[1, , ]) - 1)) {
predictive.one.kernel <- kde2d(x = Y.h[1, 1, ], y = Y.h[1, i + 1, ], n = bands)
marginal.x <- apply(predictive.one.kernel$z, 1, sum)
marginal.y <- apply(predictive.one.kernel$z, 2, sum)
marginal.x <- max(predictive.one.kernel$z) * marginal.x / max(marginal.x)
marginal.y <- max(predictive.one.kernel$z) * marginal.y / max(marginal.y)
f1 <- persp3D(x = predictive.one.kernel$x, y = predictive.one.kernel$y, z = predictive.one.kernel$z,
phi = 25, theta = 25,
xlab = var_names[i], ylab = "Log.of.Real.WPI", zlab = "Predictive Density",
shade = 0, border = NA, ticktype = "detailed", nticks = 2,
cex.lab = 1, col = "white")
f1.l1 <- trans3d(x = predictive.one.kernel$x, y = rep(max(predictive.one.kernel$y), length(predictive.one.kernel$x)), z = marginal.x, pmat = f1)
lines(f1.l1, lwd = 2, col = mcxs2)
f1.l2 <- trans3d(x = rep(min(predictive.one.kernel$x), length(predictive.one.kernel$y)), y = predictive.one.kernel$y, z = marginal.y, pmat = f1)
lines(f1.l2, lwd = 2, col = mcxs1)
f1 <- persp3D(x = predictive.one.kernel$x, y = predictive.one.kernel$y, z = predictive.one.kernel$z,
shade = 0.5, border = NA, col = mcxs2.shade1, add = TRUE)
}
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
for (i in 1:10) {
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h){
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids
z <- t(z)
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = NA, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = NA, plot = FALSE, colorkey = FALSE)
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = mcxs1.shade1,
NAcol = "white", border = NA, add = TRUE, plot = TRUE)
for (j in 1:h) {
f.l <- trans3d(x = x, y = rep(j, length(x)), z = z[j, ], pmat = f)
lines(f.l, lwd = 0.5, col = "black")
}
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = mcxs1)
}
x_dates <- format(as.yearqtr(c(dates, seq(tail(dates, 1), by = "quarter", length.out = h + 1)[-1])), "%Y Q%q")
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
for (i in 1:10) {
point.f <- apply(Y.h[, i, ], 1, mean)
interval.f <- apply(Y.h[, i, ], 1, hdi, credMass = 0.90)
combined_data <- c(y[, i], point.f)
range_val <- range(combined_data, interval.f)
plot(1:(nrow(y) + h), combined_data, type = "l", ylim = range_val, xlab = "", ylab = "", col = mcxs2, lwd = 2, main = paste("Forecast", var_names[i]), bty = "n", xaxt = "n")
axis(1, at = 1:(nrow(y) + h), labels= x_dates, cex.axis = 0.7, tck = 0)
abline(v = nrow(y), col = mcxs1)
polygon(c((nrow(y)+1):(nrow(y)+h), rev((nrow(y)+1):(nrow(y)+h))),
c(interval.f[1, ], rev(interval.f[2, ])), col = mcxs2.shade1, border = mcxs1.shade1)
}
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
for (i in 1:(ncol(Y.h[1, , ])) {
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
for (i in var_names) {
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h){
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids
z <- t(z)
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = NA, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = NA, plot = FALSE, colorkey = FALSE)
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = mcxs1.shade1,
NAcol = "white", border = NA, add = TRUE, plot = TRUE)
for (j in 1:h) {
f.l <- trans3d(x = x, y = rep(j, length(x)), z = z[j, ], pmat = f)
lines(f.l, lwd = 0.5, col = "black")
}
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = mcxs1)
}
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
for (i in seq_along(var_names)) {
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h){
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids
z <- t(z)
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = NA, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = NA, plot = FALSE, colorkey = FALSE)
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = mcxs1.shade1,
NAcol = "white", border = NA, add = TRUE, plot = TRUE)
for (j in 1:h) {
f.l <- trans3d(x = x, y = rep(j, length(x)), z = z[j, ], pmat = f)
lines(f.l, lwd = 0.5, col = "black")
}
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = mcxs1)
}
par(mfrow=c(1, 2))  # Adjusted for 10 plots
# Define the viewing angles for the 3D plots
theta <- 180
phi <- 15.5
# Iterate over the indices of variable_names
for (i in seq_along(var_names)) {
# Calculate the forecast density histogram for each time point
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)  # hdi function needs to be defined or replaced
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h){
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids  # Only need to run once
z <- t(z)
# Plot the 3D surface
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", variable_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = NA, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = NA, plot = FALSE, colorkey = FALSE)
# Draw the polygon for the HDI
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = mcxs1.shade1,
NAcol = "white", border = NA, add = TRUE, plot = TRUE)
# Add lines for the density
for (j in 1:h) {
f.l <- trans3d(x = x, y = rep(j, length(x)), z = z[j, ], pmat = f)
lines(f.l, lwd = 0.5, col = "black")
}
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = mcxs1)
}
par(mfrow=c(1, 2))  # Adjusted for 10 plots
# Define the viewing angles for the 3D plots
theta <- 180
phi <- 15.5
# Iterate over the indices of variable_names
for (i in seq_along(var_names)) {
# Calculate the forecast density histogram for each time point
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)  # hdi function needs to be defined or replaced
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h){
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids  # Only need to run once
z <- t(z)
# Plot the 3D surface
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = NA, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = NA, plot = FALSE, colorkey = FALSE)
# Draw the polygon for the HDI
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = mcxs1.shade1,
NAcol = "white", border = NA, add = TRUE, plot = TRUE)
# Add lines for the density
for (j in 1:h) {
f.l <- trans3d(x = x, y = rep(j, length(x)), z = z[j, ], pmat = f)
lines(f.l, lwd = 0.5, col = "black")
}
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = mcxs1)
}
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
# Assume Y.h is a 3D array: [simulation index, variable index, time index]
# var_names should be defined, and 'h' should be set to the number of simulations
h <- dim(Y.h)[1]  # or another appropriate value based on your data
for (i in seq_along(var_names)) {
if (i <= ncol(Y.h[1, , ])) {  # Check if the column exists
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)  # Ensure hdi function is defined or available
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h) {
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids
z <- t(z)
# Plot
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = 0.5, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = "gray", plot = TRUE, colorkey = FALSE)
# Add intervals
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = "red", border = NA, add = TRUE)
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = "blue")
}
}
Y.h         = array(NA,c(h,N,S))
for (s in 1:S){
x.Ti        = Y[(nrow(Y)-h+1):nrow(Y),]
x.Ti        = x.Ti[4:1,]
for (i in 1:h){
x.T         = c(1,as.vector(t(x.Ti)))
Y.h[i,,s]   = rmvnorm(1, mean = x.T%*%A.posterior[,,s], sigma=Sigma.posterior[,,s])
x.Ti        = rbind(Y.h[i,,s],x.Ti[1:3,])
}
}
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
theta <- 180
phi <- 15.5
# Assume Y.h is a 3D array: [simulation index, variable index, time index]
# var_names should be defined, and 'h' should be set to the number of simulations
h <- dim(Y.h)[1]  # or another appropriate value based on your data
for (i in seq_along(var_names)) {
if (i <= ncol(Y.h[1, , ])) {  # Check if the column exists
limits <- range(Y.h[, i + 1, ])
point <- apply(Y.h[, i + 1, ], 1, mean)
interval <- apply(Y.h[, i + 1, ], 1, hdi, credMass = 0.90)  # Ensure hdi function is defined or available
x <- seq(from = limits[1], to = limits[2], length.out = 100)
z <- matrix(NA, h, length(x)-1)
for (j in 1:h) {
z[j, ] <- hist(Y.h[j, i + 1, ], breaks = x, plot = FALSE)$density
}
x <- hist(Y.h[h, i + 1, ], breaks = x, plot = FALSE)$mids
z <- t(z)
# Plot
f <- persp3D(x = x, y = 1:h, z = z, phi = phi, theta = theta,
xlab = paste0("\n", var_names[i], "[t+h|t]"),
ylab = "h",
zlab = "\nPredictive densities",
shade = 0.5, border = NA, ticktype = "detailed", nticks = 3,
cex.lab = 1, col = "gray", plot = TRUE, colorkey = FALSE)
# Add intervals
polygon3D(x = c(interval[1, ], rev(interval[2, ])),
y = c(1:h, rev(1:h)),
z = rep(0, 2*h),
col = "red", border = NA, add = TRUE)
# Add line for the mean forecast
f.l1 <- trans3d(x = point, y = 1:h, z = rep(0, h), pmat = f)
lines(f.l1, lwd = 2, col = "blue")
}
}
library(quantmod)
library(ggplot2)
library(readrba)
library(readabs)
library(dplyr)
library(xts)
library(tframePlus)
library(zoo)
library(knitr)
library(kableExtra)
library(forecast)
library(tseries)
#define periods
start.period <- "1998-12-01"
start.period.qt <- "1998 Q4"
end.period <- "2023-12-31"
end.period.qt <- "2023 Q4"
# Get wage growth
log.nom.wpi <- log(subset(read_abs(series_id = "A2713851R"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get inflation rate (CPI)
log.cpi <- log(subset(read_abs(series_id = "A2325846C"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Define real wage
log.real.wpi <- log.nom.wpi - log.cpi
# Get dates
dates <- subset(read_rba_seriesid("GWPIPRIQP"), date >= as.Date(start.period) & date <= as.Date(end.period))$date
dates_yq <- as.yearqtr(dates)
dates_formatted <- format(dates_yq, "%Y Q%q")
# Get producer prices (PPI)
log.ppi <- log(subset(read_abs(series_id = "A2314865F"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get export price index (EXPI)
log.expi <- log(subset(read_abs(series_id = "A2294886K"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get import price index (IMPI)
log.impi <- log(subset(read_abs(series_id = "A2295765J"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get cost of living index (CLI)
log.cli <- log(subset(read_abs(series_id = "A4083524T"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Get Log of Unemployment rate
log.unempl <- read_abs(series_id = "A84423092X") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(value = mean(value, na.rm = TRUE)) |>
mutate(log_value = log(value)) |>
select(log_value)  |>
rename(log.unempl = log_value) |>
select(log.unempl)
#Log of labor participation
log.parti <- read_abs(series_id = "A84423093A") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date),
log_value = log(value)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(mean_log_value = mean(log_value, na.rm = TRUE)) |>
select(mean_log_value) |>
rename(log.parti = mean_log_value)
#hours worked
log.h.worked <- read_rba_seriesid("GLFMHW") |>
select(date, value) |>
mutate(q_dates = as.yearqtr(date)) |>
filter(q_dates >= start.period.qt & q_dates <= end.period.qt) |>
group_by(q_dates) |>
summarise(quarterly_sum = sum(value, na.rm = TRUE)) |>
mutate(log_quarterly_sum = log(quarterly_sum)) |>
select(log_quarterly_sum) |>
rename(log.h.worked = log_quarterly_sum)
#real gdp
log.real.gdp <- log(subset(read_rba_seriesid("GGDPCVGDP"), date >= as.Date(start.period) & date <= as.Date(end.period))$value)
# Create data frame
df <- data.frame(
"Log of Real WPI" = log.real.wpi,
"Log of CPI" = log.cpi,
"Log of PPI" = log.ppi,
"Log of EXPI" = log.expi,
"Log of IMPI" = log.impi,
"Log of CLI" = log.cli,
"Log of Unemployment" = log.unempl,
"Log of Participation" = log.parti,
"Log Hours Worked" = log.h.worked,
"Log of Real GDP" = log.real.gdp
)
# Display the first 5 rows of the dataframe
var_names <- colnames(df)
df_display <- data.frame(
"Date" = as.Date(dates),
df
)
kable(head(df_display, 5))
#new libraries
library(mvtnorm)
library(plot3D)
library(MASS)
library(HDInterval)
set.seed(123456)
y <- ts(df, start=c(1998, 4), frequency=4)
N = ncol(y)
p       = 4
K       = 1 + p*N
S       = 5000
h       = 8
Y       = ts(y[(p+1):nrow(y),])
X       = matrix(1,nrow(Y),1)
for (i in 1:p){
X     = cbind(X,y[(p+1):nrow(y)-i,])
}
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)
round(A.hat,3)
round(Sigma.hat,3)
round(cov2cor(Sigma.hat),3)
N = ncol(Y)
#set kapps
kappa.1 <- 0.02^2
kappa.2 <-100
K = 1 + (p*N)
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
A.prior[2:(N+1),] = diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)
Sigma.posterior   = rWishart(S, df=nu.bar, Sigma=S.bar.inv)
Sigma.posterior   = apply(Sigma.posterior,3,solve)
Sigma.posterior   = array(Sigma.posterior,c(N,N,S))
A.posterior       = array(rnorm(prod(c(dim(A.bar),S))),c(dim(A.bar),S))
L                 = t(chol(V.bar))
for (s in 1:S){
A.posterior[,,s]= A.bar + L%*%A.posterior[,,s]%*%chol(Sigma.posterior[,,s])
}
round(apply(A.posterior,1:2,mean),3)
# report posterior means and sd of parameters
A.E         = apply(A.posterior,1:2,mean)
A.sd        = apply(A.posterior,1:2,sd)
Sigma.E     = apply(Sigma.posterior,1:2,mean)
Sigma.sd    = apply(Sigma.posterior,1:2,sd)
Y.h         = array(NA,c(h,N,S))
for (s in 1:S){
x.Ti        = Y[(nrow(Y)-h+1):nrow(Y),]
x.Ti        = x.Ti[4:1,]
for (i in 1:h){
x.T         = c(1,as.vector(t(x.Ti)))
Y.h[i,,s]   = rmvnorm(1, mean = x.T%*%A.posterior[,,s], sigma=Sigma.posterior[,,s])
x.Ti        = rbind(Y.h[i,,s],x.Ti[1:3,])
}
}
x_dates <- format(as.yearqtr(c(dates, seq(tail(dates, 1), by = "quarter", length.out = h + 1)[-1])), "%Y Q%q")
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
for (i in 1:10) {
point.f <- apply(Y.h[, i, ], 1, mean)
interval.f <- apply(Y.h[, i, ], 1, hdi, credMass = 0.90)
combined_data <- c(y[, i], point.f)
range_val <- range(combined_data, interval.f)
plot(1:(nrow(y) + h), combined_data, type = "l", ylim = range_val, xlab = "", ylab = "", col = mcxs2, lwd = 2, main = paste("Forecast", var_names[i]), bty = "n", xaxt = "n")
axis(1, at = 1:(nrow(y) + h), labels= x_dates, cex.axis = 0.7, tck = 0)
abline(v = nrow(y), col = mcxs1)
polygon(c((nrow(y)+1):(nrow(y)+h), rev((nrow(y)+1):(nrow(y)+h))),
c(interval.f[1, ], rev(interval.f[2, ])), col = mcxs2.shade1, border = mcxs1.shade1)
}
# Define colors
mcxs1  = "#05386B"
mcxs2  = "#379683"
mcxs3  = "#5CDB95"
mcxs4  = "#8EE4AF"
mcxs5  = "#EDF5E1"
mcxs1.rgb   = col2rgb(mcxs1)
mcxs1.shade1= rgb(mcxs1.rgb[1],mcxs1.rgb[2],mcxs1.rgb[3], alpha=120, maxColorValue=255)
mcxs2.rgb   = col2rgb(mcxs2)
mcxs2.shade1= rgb(mcxs2.rgb[1],mcxs2.rgb[2],mcxs2.rgb[3], alpha=120, maxColorValue=255)
x_dates <- format(as.yearqtr(c(dates, seq(tail(dates, 1), by = "quarter", length.out = h + 1)[-1])), "%Y Q%q")
par(mfrow = c(5, 2), mar = c(2, 2, 1, 1), oma = c(0, 0, 2, 0))
for (i in 1:10) {
point.f <- apply(Y.h[, i, ], 1, mean)
interval.f <- apply(Y.h[, i, ], 1, hdi, credMass = 0.90)
combined_data <- c(y[, i], point.f)
range_val <- range(combined_data, interval.f)
plot(1:(nrow(y) + h), combined_data, type = "l", ylim = range_val, xlab = "", ylab = "", col = mcxs2, lwd = 2, main = paste("Forecast", var_names[i]), bty = "n", xaxt = "n")
axis(1, at = 1:(nrow(y) + h), labels= x_dates, cex.axis = 0.7, tck = 0)
abline(v = nrow(y), col = mcxs1)
polygon(c((nrow(y)+1):(nrow(y)+h), rev((nrow(y)+1):(nrow(y)+h))),
c(interval.f[1, ], rev(interval.f[2, ])), col = mcxs2.shade1, border = mcxs1.shade1)
}
